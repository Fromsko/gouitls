name: AutoChange

on:
  push:
    paths:
      - 'version'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if Version has changed
        id: version_changed
        run: |
          if [ -n "$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'version')" ]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21 # 根据你的项目需要设置 Go 版本

      - name: Get new version from file
        id: get_new_version
        run: |
          new_version=$(cat version)
          echo "new_version=${new_version}" >> $GITHUB_STATE
        shell: bash

      - name: Create Git Tag
        id: create_git_tag
        if: steps.version_changed.outputs.changed == 'true'
        run: |
          # 获取新的版本号
          new_version="${{ steps.get_new_version.outputs.new_version }}"

          # 创建 Git 标签
          git tag -a "$new_version" -m "Version $new_version"
          git push origin "$new_version"

        shell: bash

      - name: Generate changelog
        id: generate_changelog
        run: |
          new_version="${{ steps.get_new_version.outputs.new_version }}"
          changelog=$(git log ${new_version}..HEAD --oneline --pretty=format:"- %s")
          echo "changelog=${changelog}" >> $GITHUB_STATE
        shell: bash

      - name: Create GitHub Release
        id: create_release
        if: steps.version_changed.outputs.changed == 'true'
        run: |
          echo "Creating GitHub release..."

          # 获取新的版本号
          new_version="${{ steps.get_new_version.outputs.new_version }}"

          # 生成更新日志内容
          changelog="${{ steps.generate_changelog.outputs.changelog }}"

          # 创建 GitHub Release
          release_id=$(curl -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "tag_name": "'"$new_version"'",
              "name": "Release '"$new_version"'",
              "body": "'"$changelog"'",
              "draft": false,
              "prerelease": false
            }' | jq -r '.id')

          echo "GitHub release created with ID: $release_id"

          # 打包源码文件，例如将项目文件打包成 tar.gz 或 zip 文件
          tar -czf source-code-${new_version}.tar.gz .
          # 也可以使用 zip 命令，视项目需要而定

          # 将源码包上传到 GitHub Release
          curl -X POST "https://uploads.github.com/repos/${{ github.repository }}/releases/${release_id}/assets?name=source-code-${new_version}.tar.gz" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --header "Content-Type: application/octet-stream" \
            --upload-file source-code-${new_version}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
